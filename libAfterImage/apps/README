This directory contains 7 examples of what libAfterImage can do.
This examples are not built automagically, since most users are not
likely to need these. They are intended for developers primarily.

Here is how to build examples in this directory :

All of the examples require that libAfterImage is built first.
As libAfterImage may utilize libAfterBase, for some of the low level
tasks, it is recommended to build libAfterBase prior to anything
else. After that libAfterImage has to be built and installed.
Both of the above steps can be accomplished by simply doing :

  ./configure ; make ; make install

in respective directory.

!!!!!!!!!!!!!!!!!!!!!!!!! MMX NOTICE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Note:
libAfterImage gets compiled with inline MMX assembly enabled.
If you have CPU that does not support it - you'll
have to manually turn that off by using --disable-mmx-optimization
option to configure script.
Otherwise you gonna get wierd segfaults and Illigal Instruction
exceptions.
!!!!!!!!!!!!!!!!!!!!!!!!! MMX NOTICE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Once both libraries are installed we can proceed to compiling
the examples. Top do that you will need to execute :

  ./configure ; make

in this directory. Easy. That should build all the examples.

If something goes wrong and you need to update your system and
repeat above commands, don't forget to remove config.cache, prior
to running configure script.

All the examples accept command line parameters, and description
of those can be obtained by running example with -h option.
Arguments are not required, and examples should display some
sensible defaults.

This set of examples comes with 3 test images and 1 TTF font
file. Defaults are set to use this files.

Note that you will not be able to see TTF font rendered if you do
not have FreeType library version 2 installed.

Thanks for using libAfterImage. Contributions and bug reports are
always welcome. Please e-mail yours to <sashav at sprintmail dot com>,
or any of the AfterStep mailing lists.


ascompose
-------------------------------------------------------------------------------

ascompose uses an XML input file to compose an image and display it.  The
possible XML tags are:

<composite id="com" op="alphablend">
  id       Optional.  Image will be given this name for future reference.
  op       Optional.  Default is "alphablend".  The compositing operation.  
           Valid values are the standard AS blending ops: add, alphablend, 
           allanon, colorize, darken, diff, dissipate, hue, lighten, 
           overlay, saturate, screen, sub, tint, value.
  merge    Optional.  Default is "expand".  Valid values are "clip" and 
           "expand".  Determines whether final image will be expanded to 
           the maximum size of the layers, or clipped to the bottom layer.
  keep-transparency
           Optional.  Default is "0".  Valid values are "0" and "1".  If 
           set to "1", the transparency of the bottom layer will be 
           kept for the final image.
  All images surrounded by this tag will be composited with the given op.
<scale id="sca" width="512" height="384">
  id       Optional.  Image will be given this name for future reference.
  refid    Optional.  An image ID defined with the "id" parameter for 
           any previously created image.  If set, percentages in "width" 
           and "height" will apply to the width and height of the refid 
           image.
  width    Required.  The image will be scaled to this width.
  height   Required.  The image will be scaled to this height.
  This tag applies to the first image contained within the tag.  Any
  further images will be discarded.
<tile id="til" width="512" height="384">
  id       Optional.  Image will be given this name for future reference.
  refid    Optional.  An image ID defined with the "id" parameter for 
           any previously created image.  If set, percentages in "width" 
           and "height" will apply to the width and height of the refid 
           image.
  width    Optional.  Default is "100%".  The image will be tiled to this 
           width.
  height   Optional.  Default is "100%".  The image will be tiled to this 
           height.
  This tag applies to the first image contained within the tag.  Any
  further images will be discarded.
<img id="img" src=rose512.jpg/>
  id       Optional.  Image will be given this name for future reference.
  src      Required.  The filename (NOT URL) of the image file to load.
<gradient id="gra" angle="90" width="600" height="500" colors="#ff007fff #7f00ffff #ff007fff" offsets="0.0 0.125 1.0"/>
  id       Optional.  Image will be given this name for future reference.
  refid    Optional.  An image ID defined with the "id" parameter for 
           any previously created image.  If set, percentages in "width" 
           and "height" will apply to the width and height of the refid 
           image.
  width    Required.  The gradient will have this width.
  height   Required.  The gradient will have this height.
  colors   Required.  Whitespace-separated list of colors.  At least two
           colors are required.  Each color in this list will be visited
           in turn, at the intervals given by the offsets attribute.
  offsets  Optional.  Whitespace-separated list of floating point values
           ranging from 0.0 to 1.0.  The colors from the colors attribute
           are given these offsets, and the final gradient is rendered
           from the combination of the two.  If both colors and offsets
           are given but the number of colors and offsets do not match,
           the minimum of the two will be used, and the other will be
           truncated to match.  If offsets are not given, a smooth
           stepping from 0.0 to 1.0 will be used.
  angle    Optional.  Given in degrees.  Default is 0.  This is the
           direction of the gradient.  Currently the only supported
           values are 0, 45, 90, 135, 180, 225, 270, 315.  0 means left
           to right, 90 means top to bottom, etc.
<rotate id="rot" angle="90">
  id       Optional.  Image will be given this name for future reference.
  angle    Required.  Given in degrees.  Possible values are currently
           "90", "180", and "270".  Rotates the image through the given
           angle.
<mirror id="mir" dir="vertical">
  id       Optional.  Image will be given this name for future reference.
  dir      Required.  Possible values are "vertical" and "horizontal".
           The image will be flipped over the x-axis if dir is vertical,
           and flipped over the y-axis if dir is horizontal.
<recall id="rec" srcid="com">
  id       Optional.  Image will be given this name for future reference.
  srcid    Required.  An image ID defined with the "id" parameter for 
           any previously created image.
<save id="sav" dst="myimage.jpg" format="jpg">
  id       Optional.  Image will be given this name for future reference.
  dst      Required.  Name of file image will be saved to.
  format   Optional.  Ouput format of saved image.  Defaults to the 
           extension of the "dst" parameter.  Valid values are the standard 
           AS image file formats: jpg, bmp, png, xcf, ppm, pnm, ico, cur, 
           gif, xbm, tiff.
<text id="tex" font="myfont.ttf" point="12">My Text Here</text>
  id       Optional.  Image will be given this name for future reference.
  font     Optional.  Default is "fixed".  Font to use for text.
  point    Optional.  Default is 12.  Size of text in points.
  fgcolor  Optional.  No default.  The text will be drawn in this color.
  bgcolor  Optional.  No default.  The area behind the text will be drawn 
           in this color.
  fgimage  Optional.  No default.  The text will be textured by this image.
  bgimage  Optional.  No default.  The area behind the text will be filled 
           with this image.
  NOTE: <text> without bgcolor, fgcolor, fgimage, or bgimage will NOT 
  produce visible output by itself.  See EXAMPLES below.
<bevel id="bev" colors="#ffdddddd #ff555555" border="10 10 10 10">
  id       Optional.  Image will be given this name for future reference.
  colors   Optional.  Whitespace-separated list of colors.  Exactly two 
           colors are required.  Default is "#ffdddddd #ff555555".  The 
           first color is the color of the upper and left edges, and the 
           second is the color of the lower and right edges.
  borders  Optional.  Whitespace-separated list of integer values.  Default 
           is "10 10 10 10".  The values represent the offsets toward the 
           center of the image of each border: left, top, right, bottom.
<solid id="sol" color="#ffffffff" width="64" height="64">
  id       Optional.  Image will be given this name for future reference.
  color    Optional.  Default is "#ffffffff".  An image will be created 
           and filled with this color.
  width    Required.  The image will have this width.
  height   Required.  The image will have this height.

As an example, the default XML used by ascompose is:

  <composite op=hue>
    <composite op=add>
      <scale width=512 height=384><img src=rose512.jpg/></scale>
      <tile width=512 height=384><img src=back.xpm/></tile>
    </composite>
    <tile width=512 height=384><img src=fore.xpm/></tile>
  </composite>

To see what this does, run "ascompose --verbose", and it will tell you
what it is doing at each rendering step.

To get visible output from <text>, use something like:

  <text id="tmp">My Text</text>
  <composite>
    <solid refid="tmp" width=100% height=100% color="#ff000000"/>
    <composite keep-transparency=1 merge="clip">
      <recall srcid="tmp"/>
      <solid refid="tmp" width=100% height=100% color="#ffffffff"/>
    </composite>
  </composite>

This method isn't as easy as the shortcut fgcolor and bgcolor attributes 
of <text>, but it's much more flexible.  The background image could be 
a scaled image, for instance.

-------------------------------------------------------------------------------

<crop id="AfterStep owns! text" width=640 height=512>
<text id="AfterStep owns! text mask" font=test.ttf fgcolor="#ffffffff" point=32>AfterStep  owns jjjijijiji you
it owns your soul
and all your relatives will pity you, when you discover just how devoted you are.</text>
</crop>
<composite id="AfterStep owns!">
  <tile width="640" height="512"><recall srcid="root"/></tile>
  <scale width="640" height="512"><recall srcid="testimg"/></scale>
  <scale width="640" height="512"><recall srcid="redbrush"/></scale>
  <scale width="640" height="512"><recall srcid="ice"/></scale>
  <recall srcid="AfterStep owns! text" x=20 y=150 tint="#3d7f7f7f"/>
  <bevel x=20 y=6 tint="#3d7f7f7f" color="#dfdfdfdf #df8f8f8f" border="8 8 6 6"><gradient angle=90 width=450 height=500 colors="#ff007fff #7f00ffff #ff007fff #ff0000ff #ff000000 #ffffff00" offsets="0.0 0.125 0.25 0.5625 0.8 1.0"/></bevel>
  <mirror dir="vertical" x=20 y=300><recall srcid="AfterStep owns! text"/></mirror>
</composite>
